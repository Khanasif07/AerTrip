//
//  ATNotificationLabel.swift
//
//
//  Created by Pramod Kumar on 06/12/18.
//  Copyright Â© 2018 Pramod Kumar. All rights reserved.
//

import UIKit
import AVFoundation

@IBDesignable open class ATBedgeLabel: UILabel {
    
    //MARK:- Properties
    //MARK:- Public
    /// When positive, the background of the layer will be drawn with rounded corners. Also effects the mask generated by the `masksToBounds' property. Defaults to zero. Animatable.
    @IBInspectable public var cornerRadi: Double {
        get {
            return Double(self.layer.cornerRadius)
        }
        set {
            self.layer.cornerRadius = CGFloat(newValue)
            self.layer.masksToBounds = true
        }
    }
    
    @IBInspectable var countAnimationDuration: Double = 2.0
    
    //MARK:- Private
    private(set) var count: Int = 0
    var maxCount: Int = 999
    
    //MARK:- View Life Cycle
    //MARK:-
    public init() {
        super.init(frame: CGRect.zero)
        self.initialSetup()
    }
    public override init(frame: CGRect) {
        super.init(frame: frame)
        
        self.initialSetup()
    }
    
    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        self.initialSetup()
    }
    
    //MARK:- Methods
    //MARK:- Private
    private func initialSetup() {
        
        //default setup
        self.defaultSetup()
    }
    
    private func defaultSetup() {
        //setting the backdround color as red for default
        self.cornerRadi = Double(self.frame.size.height / 2.0)
        self.font = UIFont.boldSystemFont(ofSize: 15.0)
        self.backgroundColor = .red
        self.textColor = .white
        self.textAlignment = .center
        
        self.set(count: 0, animated: false)
    }
    
    private func internalSetCount(from: Int, to: Int, animated: Bool) {
        func setLabelText() {
            self.isHidden = self.count <= 0
            self.text = (self.count <= self.maxCount) ? "\(self.count)" : "\(self.maxCount)+"
            
            self.frame = CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: self.getWidth(forText: self.text ?? "0"), height: self.frame.size.height)
        }
        if animated {
            //set with animation
            let steps = ((to - from) > 0) ? (to - from) : -(to - from)
            DispatchQueue.global().async {
                for _ in 0 ..< steps {
                    let sleepTime = UInt32(self.countAnimationDuration/Double(steps) * 1000000.0)
                    usleep(sleepTime)
                    DispatchQueue.main.async {
                        if from > to {
                            //decrement
                            self.count = self.count > 0 ? (self.count - 1) : 0
                        }
                        else {
                            //increment
                            self.count += 1
                        }
                        setLabelText()
                    }
                }
            }
        }
        else {
            //set with out animation
            self.count = to
            setLabelText()
        }
    }
    
    private func getWidth(forText: String) -> CGFloat {
        
        let mutableParagraphStyle: NSMutableParagraphStyle = NSMutableParagraphStyle()
        mutableParagraphStyle.lineBreakMode = NSLineBreakMode.byWordWrapping
        let attributes: [NSAttributedString.Key : Any] = [NSAttributedString.Key.font: self.font, NSAttributedString.Key.paragraphStyle: mutableParagraphStyle]
        let tempStr = NSString(string: forText)
        
        let rect: CGRect = tempStr.boundingRect(with: CGSize(width: 10000.0, height: self.frame.size.height), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: attributes, context: nil)
        
        let width = CGFloat(ceilf(Float(rect.size.width))) + 5.0
        return (width > self.frame.height) ? width : self.frame.height
    }
    
    //MARK:- Public
    func set(count: Int, animated: Bool = true) {
        //change the SystemSoundID for diffrent sound while notification
        /*
         Visit: https://github.com/TUNER88/iOSSystemSoundsLibrary
         for more system sound ids
         */
        if count > 0 {
            AudioServicesPlayAlertSound(SystemSoundID(1012))
        }
        self.internalSetCount(from: self.count, to: count, animated: animated)
    }
}
